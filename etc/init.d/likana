#! /bin/sh
### BEGIN INIT INFO
# Provides:          likana
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: rikana for linux
# update:            2015/02/28
# version :          1.0
# Description:       rikana(http://suwa.6.ql.bz/rikana.html) for linux
# Author:            Kyohei Ito
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin
DESC="rikana for linux."
NAME=likana
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ -z "$LIKANA_MOUSE" ]; then
	DAEMON_ARGS="-k $LIKANA_KEYBOARD"
else
	DAEMON_ARGS="-k $LIKANA_KEYBOARD -m $LIKANA_MOUSE"
fi
DAEMON_REDIRECT=$LIKANA_KEYBOARD

# Start the execution daemon? (yes or no)
if [ "$LIKANA_START"=yes ] ; then
	if [ ! -e "/etc/rc2.d/S20$NAME" ] ;then
		ln -s /etc/init.d/$NAME /etc/rc2.d/S20$NAME
		ln -s /etc/init.d/$NAME /etc/rc3.d/S20$NAME
		ln -s /etc/init.d/$NAME /etc/rc4.d/S20$NAME
		ln -s /etc/init.d/$NAME /etc/rc5.d/S20$NAME
	fi
else
	if [ -e "/etc/rc2.d/S20$NAME" ] ;then
		rm /etc/rc2.d/S20$NAME
		rm /etc/rc3.d/S20$NAME
		rm /etc/rc4.d/S20$NAME
		rm /etc/rc5.d/S20$NAME
	fi
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	[ -e "$PIDFILE" ] && return 1

	if [ -z "$LIKANA_KEYBOARD" ]; then
		log_daemon_msg "/etc/default/likana LIKANA_KEYBOARD is not setted."
		return 2
	fi

	start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE \
		--background --exec "$LIKANA_BASH" -- -c "exec $DAEMON \
		$DAEMON_ARGS > $DAEMON_REDIRECT" || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	[ ! -e "$PIDFILE" ] && return 1
	start-stop-daemon --stop --oknodo --signal TERM --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	log_daemon_msg "Starting $NAME"
	do_start
	case "$?" in
		0)	log_end_msg 0
			;;
		1)	log_daemon_msg "$NAME was already running";
			log_end_msg 0
			;;
		*)	# Failed to start
			log_daemon_msg "$NAME could not be started";
			log_end_msg 1
			;;

	esac
	;;
  stop)
	log_daemon_msg "Stopping $NAME"
	do_stop
	case "$?" in
		0)	log_end_msg 0 ;;
		1)	log_daemon_msg "$NAME was already stopped";
			log_end_msg 0 ;;
		2)	# Failed to start
			log_daemon_msg "$NAME could not be stopped";
			log_end_msg 1
			;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $NAME"
	do_stop
	case "$?" in
		0)
			do_start
			case "$?" in
				0)	log_end_msg 0 ;;
				1)	log_daemon_msg "old $NAME is still running";
					log_end_msg 1 ;; # Old process is still running
				*)	log_daemon_msg "$NAME could not be started";
					log_end_msg 1 ;; # Failed to start
			esac
		;;
		
		1)	log_daemon_msg "$NAME was not starting";
			do_start
			case "$?" in
				0)	log_end_msg 0 ;;
				1)	log_daemon_msg "old $NAME is still running";
					log_end_msg 1 ;; # Old process is still running
				*)	log_daemon_msg "$NAME could not be started";
					log_end_msg 1 ;; # Failed to start
			esac
		;;

		*)
			# Failed to stop
			log_daemon_msg "$NAME could not be stopped";
			log_end_msg 1
			;;
		esac
		;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
